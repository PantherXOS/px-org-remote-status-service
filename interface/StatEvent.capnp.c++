// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: StatEvent.capnp

#include "StatEvent.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<85> b_8cd6ee5569546332 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50,  99,  84, 105,  85, 238, 214, 140,
     16,   0,   0,   0,   1,   0,   1,   0,
    181, 179, 238,  65, 216,  37,  19, 146,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116,  97, 116,  69, 118, 101, 110,
    116,  46,  99,  97, 112, 110, 112,  58,
     69, 118, 101, 110, 116,  68,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101, 126, 119, 116, 158,  45,  65, 248,
      1,   0,   0,   0,  50,   0,   0,   0,
     80,  97, 114,  97, 109,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 112, 105,  99,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 126, 119, 116, 158,  45,  65, 248,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cd6ee5569546332 = b_8cd6ee5569546332.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cd6ee5569546332[] = {
  &s_f8412d9e74777e65,
};
static const uint16_t m_8cd6ee5569546332[] = {2, 3, 1, 0};
static const uint16_t i_8cd6ee5569546332[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_8cd6ee5569546332 = {
  0x8cd6ee5569546332, b_8cd6ee5569546332.words, 85, d_8cd6ee5569546332, m_8cd6ee5569546332,
  1, 4, i_8cd6ee5569546332, nullptr, nullptr, { &s_8cd6ee5569546332, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_f8412d9e74777e65 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 126, 119, 116, 158,  45,  65, 248,
     26,   0,   0,   0,   1,   0,   0,   0,
     50,  99,  84, 105,  85, 238, 214, 140,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116,  97, 116,  69, 118, 101, 110,
    116,  46,  99,  97, 112, 110, 112,  58,
     69, 118, 101, 110, 116,  68,  97, 116,
     97,  46,  80,  97, 114,  97, 109,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8412d9e74777e65 = b_f8412d9e74777e65.words;
#if !CAPNP_LITE
static const uint16_t m_f8412d9e74777e65[] = {0, 1};
static const uint16_t i_f8412d9e74777e65[] = {0, 1};
const ::capnp::_::RawSchema s_f8412d9e74777e65 = {
  0xf8412d9e74777e65, b_f8412d9e74777e65.words, 48, nullptr, m_f8412d9e74777e65,
  0, 2, i_f8412d9e74777e65, nullptr, nullptr, { &s_f8412d9e74777e65, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_818effc20708aaed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237, 170,   8,   7, 194, 255, 142, 129,
     16,   0,   0,   0,   3,   0,   0,   0,
    181, 179, 238,  65, 216,  37,  19, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116,  97, 116,  69, 118, 101, 110,
    116,  46,  99,  97, 112, 110, 112,  58,
     69, 118, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    146, 181, 234, 245, 201, 203,  21, 225,
    146,  21, 207, 117,  13, 116,  58, 236,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    101, 109, 105, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_818effc20708aaed = b_818effc20708aaed.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_818effc20708aaed[] = {
  &s_e115cbc9f5eab592,
  &s_ec3a740d75cf1592,
};
static const uint16_t m_818effc20708aaed[] = {0};
const ::capnp::_::RawSchema s_818effc20708aaed = {
  0x818effc20708aaed, b_818effc20708aaed.words, 28, d_818effc20708aaed, m_818effc20708aaed,
  2, 1, nullptr, nullptr, nullptr, { &s_818effc20708aaed, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e115cbc9f5eab592 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 181, 234, 245, 201, 203,  21, 225,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116,  97, 116,  69, 118, 101, 110,
    116,  46,  99,  97, 112, 110, 112,  58,
     69, 118, 101, 110, 116,  46, 101, 109,
    105, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 110, 116,  68,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     50,  99,  84, 105,  85, 238, 214, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e115cbc9f5eab592 = b_e115cbc9f5eab592.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e115cbc9f5eab592[] = {
  &s_8cd6ee5569546332,
};
static const uint16_t m_e115cbc9f5eab592[] = {0};
static const uint16_t i_e115cbc9f5eab592[] = {0};
const ::capnp::_::RawSchema s_e115cbc9f5eab592 = {
  0xe115cbc9f5eab592, b_e115cbc9f5eab592.words, 34, d_e115cbc9f5eab592, m_e115cbc9f5eab592,
  1, 1, i_e115cbc9f5eab592, nullptr, nullptr, { &s_e115cbc9f5eab592, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ec3a740d75cf1592 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146,  21, 207, 117,  13, 116,  58, 236,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116,  97, 116,  69, 118, 101, 110,
    116,  46,  99,  97, 112, 110, 112,  58,
     69, 118, 101, 110, 116,  46, 101, 109,
    105, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec3a740d75cf1592 = b_ec3a740d75cf1592.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ec3a740d75cf1592 = {
  0xec3a740d75cf1592, b_ec3a740d75cf1592.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ec3a740d75cf1592, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// EventData
constexpr uint16_t EventData::_capnpPrivate::dataWordSize;
constexpr uint16_t EventData::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EventData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventData::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// EventData::Param
constexpr uint16_t EventData::Param::_capnpPrivate::dataWordSize;
constexpr uint16_t EventData::Param::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EventData::Param::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventData::Param::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Event::EmitParams,  ::Event::EmitResults>
Event::Client::emitRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Event::EmitParams,  ::Event::EmitResults>(
      0x818effc20708aaedull, 0, sizeHint);
}
::kj::Promise<void> Event::Server::emit(EmitContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "StatEvent.capnp:Event", "emit",
      0x818effc20708aaedull, 0);
}
::kj::Promise<void> Event::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x818effc20708aaedull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("StatEvent.capnp:Event", interfaceId);
  }
}
::kj::Promise<void> Event::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return emit(::capnp::Capability::Server::internalGetTypedContext<
           ::Event::EmitParams,  ::Event::EmitResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "StatEvent.capnp:Event",
          0x818effc20708aaedull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Event
#if !CAPNP_LITE
constexpr ::capnp::Kind Event::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Event::EmitParams
constexpr uint16_t Event::EmitParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::EmitParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Event::EmitParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::EmitParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Event::EmitResults
constexpr uint16_t Event::EmitResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::EmitResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Event::EmitResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::EmitResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



